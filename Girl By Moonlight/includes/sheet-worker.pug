script(type="text/worker")
	-
		// This part is run in pug
		// found in variables.pug:
			// pbkeys (array-within-pug)
			// toggles (array-within-pug) 
			// stressfields (string that contains an array once used in javascript below)
			// toggleclicks (string)
			// stressclicks (string)
	.
		// This part is run in the sheetworker javascript

		// To understand what's going on with these functions,
		// refer to https://wiki.roll20.net/Macros#Drop-Down_Prompts_for_Roll_Queries
		// and look for "nesting queries" section

		function diceMagic(num, nest, dicetag) {
			if ( typeof(dicetag) == 'undefined' ) {
				dicetag = "";
			}
			log("Dice tag: ["+dicetag+"]");
			dicetag = String(dicetag);

			if ( typeof(nest) == 'undefined' ) {
				nest = 1;
			} else {
				nest = parseInt(nest);
			}
			var amp = '&';
			if ( nest == 2 ) {
				// Within diceMagic, our list is actually one nesting level deeper than the surroundings
				// So at nest level 2, we're &amp; all the & for the commas in &#44; because those commas
				// actually exist at a third level
				amp = '&amp;';
			}
			var joint ='';
			// joint = amp + "#44" + "; "
			if (num > 0) {
				return `${dicetag}dice=${
					[...Array(num).keys()].map(() => "[[d6cf<3cs>6]]").join(joint)
				}`;
			} else {
				return dicetag + "zerodice=[[d6cf<3cs>6]]" + joint + "[[d6cf<3cs>6]]";
			}
		}

		function buildRollFormula(base,nest,dicetag) {
			if ( typeof(dicetag) == 'undefined' ) {
				dicetag = "";
			}
			if ( typeof(nest) == 'undefined' ) {
				nest = 1;
			} else {
				nest = parseInt(nest);
			}
			var comma = ',';
			var pipe = '|';
			// Putting { here to keep the braces balanced in the editor
			var endbrace = '}';
			if ( nest == 2 ) {
				// If doing further nest levels, these remain static but the ampersand complexifies
				var amp = '&';
				comma = amp + '#44' + ';';
				pipe = amp + '#124' + ';';
				endbrace = amp + '#125' + ';';
			}
			return ` ?{${getTranslationByKey("Bonus Dice")}${pipe}${
				[0, 1, 2, 3, 4, 5, 6, -1, -2, -3]
					.map(n => `${n}${comma}${diceMagic(n + (parseInt(base) || 0),nest,dicetag)}`).join(pipe)
			}${endbrace}`;
		}

		function buildEclipseRollFormula(base,nest,dicetag) {
			return '{{'+diceMagic(base,nest,dicetag)+'}}';
		}

		// function buildRollFormulaORIGINAL(base) {
			// return ` {{?{${getTranslationByKey("Bonus Dice")}|${
				// [0, 1, 2, 3, 4, 5, 6, -1, -2, -3]
					// .map(n => `${n},${diceMagic(n + (parseInt(base) || 0))}`).join("|")
			// }}}}`;
		// }

		// Builds out the list of additional dice I guess
		function buildNumdiceFormula() {
			return ` {{?{${getTranslationByKey("Number of Dice")}|${
				[0, 1, 2, 3, 4, 5, 6].map(n => `${n},${diceMagic(n,1,'')}`).join("|")
			}}}}`;
		}

		on("sheet:opened", function(e) {
			var a = {};
			// Building out core essentials for dice rolls, with translated prompts
			a["Position-Query"] = `?{${getTranslationByKey("Position")}|${getTranslationByKey("Risky")},position=${getTranslationByKey("Risky")}|${getTranslationByKey("Controlled")},position=${getTranslationByKey("Controlled")}|${getTranslationByKey("Desperate")},position=${getTranslationByKey("Desperate")}|${getTranslationByKey("Fortune")},short=short}`;
			a["Effect-Query"] = `?{${getTranslationByKey("Effect")}|${getTranslationByKey("Standard")}|${getTranslationByKey("Limited")}|${getTranslationByKey("Great")}|${getTranslationByKey("Extreme")}|${getTranslationByKey("Zero")}}`;
			a["Number-Of-Dice"] = buildNumdiceFormula();
			a["Q-Transcendent"] = getTranslationByKey('Transcendent?');
			a["A-Yes"] = getTranslationByKey('Yes');
			a["A-No"] = getTranslationByKey('No');
			log(a);
			setAttrs(a);
		});


		on("#{statsclicks}", function(e) {
			id = (e.htmlAttributes.name).substring(4); // Strips off the 'act_'
			getAttrs([id], function(a) {
				if ( Number(a[id]) === 1 ) {
					a[id] = "0";
				} else {
					a[id] = "1";
				}
				setAttrs(a);
			});
		});

		on("#{statschanges}", function(e) {
			var actioncats = !{actioncats};
			getAttrs([!{statsfields}], function(a) {
				var list = Object.keys(a);
				for(i = 0; i < list.length; i++) {
					// Format: [Action]-[Dot|Star]-[1|2]
					var parts = list[i].split('-');
					var action =  parts[0];
					var cat = actioncats[action];
					var kind = parts[1];
					var num = parts[2];
					if ( typeof(a[action+'-Base-Total']) == "undefined" ) {
						a[action+'-Base-Total'] = 0;
					}
					if ( typeof(a[action+'-Transcend-Total']) == "undefined" ) {
						a[action+'-Transcend-Total'] = 0;
					}
					if ( typeof(a[cat+'-Resist-Total']) == "undefined" ) {
						a[cat+'-Resist-Total'] = 0;
					}
					if ( kind == "Dot" ) {
						a[action+'-Base-Total'] += Number(a[list[i]]);
						if ( num == "1" ) {
							a[cat+'-Resist-Total'] += Number(a[list[i]]);
						}
					}
					a[action+'-Transcend-Total'] += Number(a[list[i]]); 
				};
				var cats = ['Sun','Moon','Stars'];
				var catlow = 4;
				for(i = 0; i < cats.length; i++) {
					var cat = cats[i];
					a[cat+'-Resist-Roll-Formula'] = buildRollFormula(a[cat+'-Resist-Total']);
					a[cat+'-Eclipse-Roll-Formula'] = buildEclipseRollFormula(a[cat+'-Resist-Total']);
					if ( a[cat+'-Resist-Total'] < catlow ) {
						catlow = a[cat+'-Resist-Total'];
					}
				}
				for(i = 0; i < cats.length; i++) {
					var cat = cats[i];
					if ( a[cat+'-Resist-Total'] == catlow ) {
						a[cat+'-Eclipse-Eligible'] = 1;
					} else {
						a[cat+'-Eclipse-Eligible'] = 0;
					}
				}
				var acts = Object.keys(actioncats);
				for(i = 0; i < acts.length; i++) {
					var act = acts[i];
					a[act+'-Base-Roll-Formula'] = buildRollFormula(a[act+'-Base-Total'],2);
					a[act+'-Transcend-Roll-Formula'] = buildRollFormula(a[act+'-Transcend-Total'],2,'transcend');
				}
				log(a);
				setAttrs(a);
			});
		});


		on("#{toggleclicks}", function(e) {
			var id = "";
			if ( typeof e.sourceAttribute !== "undefined" && e.sourceAttribute !== "" ) {
				id = e.sourceAttribute;
			} else {
				id = (e.htmlAttributes.name).substring(4); // Strips off the 'act_'
			}
			log("Toggle Handler: " + id);
			getAttrs([id], function(a) {
				if ( a[id] === "1" ) {
					a[id] = "0";
				} else {
					a[id] = "1";
				}
				setAttrs(a);
			});
		});

		on("change:Choose-Veteran-Ability", function(e) {
			// e.previousValue
			// e.newValue
			var atts = {};
			if ( typeof(e.newValue) == "undefined" || e.newValue == "" || e.newValue == "0") {
				atts["Choose-Veteran-Ability"] = "";
				atts["Ability-Veteran-Name"] = "";
				atts["Ability-Veteran-Effect"] = "";
			} else {
				var parts = String(e.newValue).split("|");
				var name = parts[0];
				var effect = parts[1];
				var tf = parts[2];
				atts["Ability-Veteran-Name"] = getTranslationByKey(name);
				atts["Ability-Veteran-Effect"] = getTranslationByKey(effect);
				atts["Ability-Veteran-Has-Text"] = tf;
			}
			setAttrs(atts);
		});

		on("change:Choose-Outside-Ability", function(e) {
			// e.previousValue
			// e.newValue
			var atts = {};
			if ( typeof(e.newValue) == "undefined" || e.newValue == "" || e.newValue == "0") {
				atts["Choose-Outside-Ability"] = "";
				atts["Ability-Outside-Name"] = "";
				atts["Ability-Outside-Effect"] = "";
			} else {
				var parts = String(e.newValue).split("|");
				var name = parts[0];
				var effect = parts[1];
				var tf = parts[2];
				var sublist = [];
				if ( parts.length > 3 ) {
					sublist = JSON.parse(parts[3]);
				}
				atts["Ability-Outside-Name"] = getTranslationByKey(name);
				atts["Ability-Outside-Effect"] = getTranslationByKey(effect);
				atts["Ability-Outside-Has-Text"] = tf;
				if ( sublist.length > 0 ) {
					log(sublist);
					for ( var i = 1 ; i <= sublist.length ; i++ ) {
						var suba = sublist[i-1];
						log(suba);
						var sname = suba["name"];
						var seffect = suba["effect"];
						atts["Ability-Outside-"+i+"-Name"] = getTranslationByKey(sname);
						atts["Ability-Outside-"+i+"-Effect"] = getTranslationByKey(seffect);
					}
				} else {
					for ( var i = 1 ; i <= 3 ; i++ ) {
						atts["Ability-Outside-"+i+"-Name"] = "";
						atts["Ability-Outside-"+i+"-Effect"] = "";
					}
				}
			}
			setAttrs(atts);
		});

		on("change:Choose-Ability-Transcendent-UnlikelyHero-1 change:Choose-Ability-Transcendent-UnlikelyHero-2 change:Choose-Ability-Transcendent-UnlikelyHero-3", function(e) {
			// e.sourceAttribute
			var abroot = String(e.sourceAttribute).slice(7); // Should remove 'Choose-' from the front of it
			// e.previousValue
			// e.newValue
			var atts = {};
			if ( typeof(e.newValue) == "undefined" || e.newValue == "" || e.newValue == "0") {
				atts[e.sourceAttribute] = "";
				atts[abroot+"-Name"] = "";
				atts[abroot+"-Effect"] = "";
			} else {
				var parts = String(e.newValue).split("|");
				var name = parts[0];
				var effect = parts[1];
				var tf = parts[2];
				atts[abroot+"-Name"] = getTranslationByKey(name);
				atts[abroot+"-Effect"] = getTranslationByKey(effect);
				atts[abroot+"-Has-Text"] = tf;
			}
			setAttrs(atts);
		});

		on("#{stressclicks}", function(e) {
			var id = "";
			id = (e.htmlAttributes.name).substring(4); // Strips off the 'act_'
			log("Stress Toggle Handler: " + id);
			getAttrs(!{stressfields}, function(a) {
				if ( Number(a[id]) === 1 ) {
					log(id+"=1");
					a[id] = "0";
					// We want to empty others past the one turned on
					var endnum = Number(id.substring('7')); // Strips off the 'Stress-'
					for(i = endnum; i <= 9; i++) {
						log('Setting Stress-'+i+"=0")
						a['Stress-'+i] = 0;
					}
				} else {
					log(id+"=0");
					a[id] = "1";
					// We want to fill others up to the one turned on
					var endnum = Number(id.substring('7')); // Strips off the 'Stress-'
					for(i = 1; i < endnum; i++) {
						log('Setting Stress-'+i+"=1")
						a['Stress-'+i] = 1;
					}
				}
				var st = 0;
				for(i = 1; i <= 9; i++) {
					st = st + Number(a['Stress-'+i]);
				}
				a['Stress-Total'] = st;
				if ( a['Stress-9'] == 1) {
					a['Toggle-Eclipse-Expand'] = 0;
				}
				setAttrs(a);
			});
		});

		on("#{transclicks}", function(e) {
			var id = "";
			id = (e.htmlAttributes.name).substring(4); // Strips off the 'act_'
			log("Transcendence Toggle Handler: " + id);
			getAttrs(!{transfields}, function(a) {
				if ( Number(a[id]) === 1 ) {
					log(id+"=1");
					a[id] = "0";
					// We want to empty others past the one turned on
					var endnum = Number(id.substring('14')); // Strips off the 'Transcendence-'
					for(i = endnum; i <= 4; i++) {
						log('Setting Transcendence-'+i+"=0")
						a['Transcendence-'+i] = 0;
					}
				} else {
					log(id+"=0");
					a[id] = "1";
					// We want to fill others up to the one turned on
					var endnum = Number(id.substring('14')); // Strips off the 'Transcendence-'
					for(i = 1; i < endnum; i++) {
						log('Setting Transcendence-'+i+"=1")
						a['Transcendence-'+i] = 1;
					}
				}
				var st = 0;
				for(i = 1; i <= 4; i++) {
					st = st + Number(a['Transcendence-'+i]);
				}
				a['Transcendence-Total'] = st;
				setAttrs(a);
			});
		});

		on("#{linkclicks}", function(e) {
			var id = "";
			id = (e.htmlAttributes.name).substring(4); // Strips off the 'act_'
			var prefix = id.substring(0,id.length-6); // Strips off the -Dot-X
			log("Link Toggle Handler: " + prefix + "|" + id);
			getAttrs(!{linkfields}, function(a) {
				if ( Number(a[id]) === 1 ) {
					log(id+"=1");
					a[id] = "0";
					// We want to empty others past the one turned on
					var endnum = Number(id.substring('11')); // Strips off the 'Link-X-Dot-'
					for(i = endnum; i <= 6; i++) {
						log('Setting '+prefix+'-Dot-'+i+"=0")
						a[prefix+'-Dot-'+i] = 0;
					}
				} else {
					log(id+"=0");
					a[id] = "1";
					// We want to fill others up to the one turned on
					var endnum = Number(id.substring('11')); // Strips off the 'Link-X-Dot-'
					for(i = 1; i < endnum; i++) {
						log('Setting '+prefix+'-Dot-'+i+"=1")
						a[prefix+'-Dot-'+i] = 1;
					}
				}
				// 
				var st = 0;
				for(i = 1; i <= 6; i++) {
					st = st + Number(a[prefix+'-Dot-'+i]);
				}
				a[prefix+'-Total'] = st;
				setAttrs(a);
			});
		});

		on("#{pbxpclicks}", function(e) {
			var id = "";
			id = (e.htmlAttributes.name).substring(4); // Strips off the 'act_'
			log("Playbook-XP Toggle Handler: " + id);
			getAttrs(!{pbxpfields}, function(a) {
				if ( Number(a[id]) === 1 ) {
					log(id+"=1");
					a[id] = "0";
					// We want to empty others past the one turned on
					var endnum = Number(id.substring('12')); // Strips off the 'Playbook-XP-'
					for(i = endnum; i <= 8; i++) {
						log('Setting Playbook-XP-'+i+"=0")
						a['Playbook-XP-'+i] = 0;
					}
				} else {
					log(id+"=0");
					a[id] = "1";
					// We want to fill others up to the one turned on
					var endnum = Number(id.substring('12')); // Strips off the 'Playbook-XP-'
					for(i = 1; i < endnum; i++) {
						log('Setting Playbook-XP-'+i+"=1")
						a['Playbook-XP-'+i] = 1;
					}
				}
				var st = 0;
				for(i = 1; i <= 8; i++) {
					st = st + Number(a['Playbook-XP-'+i]);
				}
				a['Playbook-XP-Total'] = st;
				setAttrs(a);
			});
		});

		on("#{psxpclicks}", function(e) {
			var id = "";
			id = (e.htmlAttributes.name).substring(4); // Strips off the 'act_'
			log("Playset-XP Toggle Handler: " + id);
			getAttrs(!{psxpfields}, function(a) {
				if ( Number(a[id]) === 1 ) {
					log(id+"=1");
					a[id] = "0";
					// We want to empty others past the one turned on
					var endnum = Number(id.substring('11')); // Strips off the 'Playset-XP-'
					for(i = endnum; i <= 8; i++) {
						log('Setting Playset-XP-'+i+"=0")
						a['Playset-XP-'+i] = 0;
					}
				} else {
					log(id+"=0");
					a[id] = "1";
					// We want to fill others up to the one turned on
					var endnum = Number(id.substring('11')); // Strips off the 'Playset-XP-'
					for(i = 1; i < endnum; i++) {
						log('Setting Playset-XP-'+i+"=1")
						a['Playset-XP-'+i] = 1;
					}
				}
				var st = 0;
				for(i = 1; i <= 8; i++) {
					st = st + Number(a['Playset-XP-'+i]);
				}
				a['Playset-XP-Total'] = st;
				setAttrs(a);
			});
		});

		on("#{sunclicks}", function(e) {
			var id = "";
			id = (e.htmlAttributes.name).substring(4); // Strips off the 'act_'
			log("Sun-XP Toggle Handler: " + id);
			getAttrs(!{sunfields}, function(a) {
				if ( Number(a[id]) === 1 ) {
					log(id+"=1");
					a[id] = "0";
					// We want to empty others past the one turned on
					var endnum = Number(id.substring('7')); // Strips off the 'Sun-XP-'
					for(i = endnum; i <= 6; i++) {
						log('Setting Sun-XP-'+i+"=0")
						a['Sun-XP-'+i] = 0;
					}
				} else {
					log(id+"=0");
					a[id] = "1";
					// We want to fill others up to the one turned on
					var endnum = Number(id.substring('7')); // Strips off the 'Sun-XP-'
					for(i = 1; i < endnum; i++) {
						log('Setting Sun-XP-'+i+"=1")
						a['Sun-XP-'+i] = 1;
					}
				}
				var st = 0;
				for(i = 1; i <= 6; i++) {
					st = st + Number(a['Sun-XP-'+i]);
				}
				a['Sun-XP-Total'] = st;
				setAttrs(a);
			});
		});

		on("#{moonclicks}", function(e) {
			var id = "";
			id = (e.htmlAttributes.name).substring(4); // Strips off the 'act_'
			log("Moon-XP Toggle Handler: " + id);
			getAttrs(!{moonfields}, function(a) {
				if ( Number(a[id]) === 1 ) {
					log(id+"=1");
					a[id] = "0";
					// We want to empty others past the one turned on
					var endnum = Number(id.substring('8')); // Strips off the 'Moon-XP-'
					for(i = endnum; i <= 6; i++) {
						log('Setting Moon-XP-'+i+"=0")
						a['Moon-XP-'+i] = 0;
					}
				} else {
					log(id+"=0");
					a[id] = "1";
					// We want to fill others up to the one turned on
					var endnum = Number(id.substring('8')); // Strips off the 'Moon-XP-'
					for(i = 1; i < endnum; i++) {
						log('Setting Moon-XP-'+i+"=1")
						a['Moon-XP-'+i] = 1;
					}
				}
				var st = 0;
				for(i = 1; i <= 6; i++) {
					st = st + Number(a['Moon-XP-'+i]);
				}
				a['Moon-XP-Total'] = st;
				setAttrs(a);
			});
		});

		on("#{starsclicks}", function(e) {
			var id = "";
			id = (e.htmlAttributes.name).substring(4); // Strips off the 'act_'
			log("Stars-XP Toggle Handler: " + id);
			getAttrs(!{starsfields}, function(a) {
				if ( Number(a[id]) === 1 ) {
					log(id+"=1");
					a[id] = "0";
					// We want to empty others past the one turned on
					var endnum = Number(id.substring('9')); // Strips off the 'Stars-XP-'
					for(i = endnum; i <= 6; i++) {
						log('Setting Stars-XP-'+i+"=0")
						a['Stars-XP-'+i] = 0;
					}
				} else {
					log(id+"=0");
					a[id] = "1";
					// We want to fill others up to the one turned on
					var endnum = Number(id.substring('9')); // Strips off the 'Stars-XP-'
					for(i = 1; i < endnum; i++) {
						log('Setting Stars-XP-'+i+"=1")
						a['Stars-XP-'+i] = 1;
					}
				}
				var st = 0;
				for(i = 1; i <= 6; i++) {
					st = st + Number(a['Stars-XP-'+i]);
				}
				a['Stars-XP-Total'] = st;
				setAttrs(a);
			});
		});

		on("#{tierclicks}", function(e) {
			var id = "";
			id = (e.htmlAttributes.name).substring(4); // Strips off the 'act_'
			var endnum = Number(id.substring('15')); // Strips off the 'Tier-Track-[A|B]-[1-3]-'
			var prefix = id.slice(0,-1); // Strips off the [1-6]
			log("Tier Toggle Handler: " + id);
			getAttrs(!{tierfields}, function(a) {
				if ( Number(a[id]) === 1 ) {
					log(id+"=1");
					a[id] = "0";
					// We want to empty others past the one turned on
					for(i = endnum; i <= 6; i++) {
						log(prefix+i+"=0")
						a[prefix+i] = 0;
					}
				} else {
					log(id+"=0");
					a[id] = "1";
					// We want to fill others up to the one turned on
					for(i = 1; i < endnum; i++) {
						log(prefix+i+"=1")
						a[prefix+i] = 1;
					}
				}
				var st = 0;
				for(i = 1; i <= 6; i++) {
					st = st + Number(a[prefix+i]);
				}
				a[prefix+'Total'] = st;
				setAttrs(a);
			});
		});

		on("#{invclicks}", function(e) {
			var id = "";
			id = (e.htmlAttributes.name).substring(4); // Strips off the 'act_'
			var endnum = Number(id.substring('16')); // Strips off the 'Investigation-[1-3]-'
			var prefix = id.slice(0,-1); // Strips off the [1-6]
			log("Investigation Toggle Handler: " + id);
			getAttrs(!{invfields}, function(a) {
				if ( Number(a[id]) === 1 ) {
					log(id+"=1");
					a[id] = "0";
					// We want to empty others past the one turned on
					for(i = endnum; i <= 6; i++) {
						log(prefix+i+"=0")
						a[prefix+i] = 0;
					}
				} else {
					log(id+"=0");
					a[id] = "1";
					// We want to fill others up to the one turned on
					for(i = 1; i < endnum; i++) {
						log(prefix+i+"=1")
						a[prefix+i] = 1;
					}
				}
				var st = 0;
				for(i = 1; i <= 6; i++) {
					st = st + Number(a[prefix+i]);
				}
				a[prefix+'Total'] = st;
				setAttrs(a);
			});
		});

		on("change:Playbook", function(e) {
			var prev = "";
			var newv = "";
			if ( typeof(e.previousValue) != "undefined" ) {
				prev = e.previousValue;
			}
			if ( typeof(e.newValue) != "undefined" ) {
				newv = e.newValue;
			}
			var sdots = {
				"Enigma": ["Express","Conceal"],
				"Stranger": ["Analyze","Conceal"],
				"TimeTraveller": ["Confess","Analyze"],
				"Harmony": ["Empathize","Forgive"],
				"Guardian": ["Defy","Perceive"],
				"Outsider": ["Defy","Express"],
				"UnlikelyHero": ["Confess","Forgive"]
			};
			var a = {};
			if ( prev != "" ) {
				var dots = sdots[prev];
				a[dots[0]+"-Dot-1"] = 0;
				a[dots[1]+"-Dot-1"] = 0;
			}
			if ( newv != "" ) {
				var dots = sdots[newv];
				a[dots[0]+"-Dot-1"] = 1;
				a[dots[1]+"-Dot-1"] = 1;
			}
			setAttrs(a);
		});
		
		on("clicked:repeating_clocks:add clicked:repeating_clocks:sub clicked:Recovery-add clicked:Recovery-sub", function(e) {
			log(e);
			if ( typeof(e.sourceAttribute) == "undefined" ) {
				e.sourceAttribute = (e.htmlAttributes.name).slice(4); // strip act_
			}
			var rowprefix = (e.sourceAttribute).slice(0,-3); // Strips off the 'add' or 'sub'
			var direction = (e.sourceAttribute).slice(rowprefix.length); // Strips off the prefix
			getAttrs([ rowprefix+'size', rowprefix+'ticks' ], function(a) {
				log(a);
				if ( typeof(a[rowprefix+'size']) == "undefined" ) {
					a[rowprefix+'size'] = 4;
				}
				if ( typeof(a[rowprefix+'ticks']) == "undefined" ) {
					a[rowprefix+'ticks'] = 0;
				}
				var size = Number(a[rowprefix+'size']);
				var ticks = Number(a[rowprefix+'ticks']);
				if(direction == "add") {
					ticks++;
				}
				if(direction == "sub") {
					ticks--;
				}
				if ( ticks > size ) {
					ticks = size;
				}
				if ( ticks < 0 ) {
					ticks = 0;
				}
				a[rowprefix+'ticks'] = ticks;
				setAttrs(a);
			});
		});

		on("change:repeating_clocks:size", function(e) {
			log(e);
			var rowprefix = (e.sourceAttribute).slice(0,-4); // Strips off the 'size'
			getAttrs([ rowprefix+'size', rowprefix+'ticks' ], function(a) {
				log(a);
				if ( typeof(a[rowprefix+'size']) == "undefined" ) {
					a[rowprefix+'size'] = 4;
				}
				if ( typeof(a[rowprefix+'ticks']) == "undefined" ) {
					a[rowprefix+'ticks'] = 0;
				}
				var size = Number(a[rowprefix+'size']);
				var ticks = Number(a[rowprefix+'ticks']);
				if ( ticks > size ) {
					ticks = size;
				}
				if ( ticks < 0 ) {
					ticks = 0;
				}
				a[rowprefix+'ticks'] = ticks;
				setAttrs(a);
			});
		});

		on("#{flagshipclicks}", function(e) {
			var id = "";
			id = (e.htmlAttributes.name).substring(4); // Strips off the 'act_'
			log("Flagship-Upgrade Toggle Handler: " + id);
			getAttrs(!{flagshipfields}, function(a) {
				if ( Number(a[id]) === 1 ) {
					log(id+"=1");
					a[id] = "0";
					// We want to empty others past the one turned on
					var endnum = Number(id.substring('17')); // Strips off the 'Flagship-Upgrade-'
					for(i = endnum; i <= 8; i++) {
						log('Setting Flagship-Upgrade-'+i+"=0")
						a['Flagship-Upgrade-'+i] = 0;
					}
				} else {
					log(id+"=0");
					a[id] = "1";
					// We want to fill others up to the one turned on
					var endnum = Number(id.substring('17')); // Strips off the 'Flagship-Upgrade-'
					for(i = 1; i < endnum; i++) {
						log('Setting Flagship-Upgrade-'+i+"=1")
						a['Flagship-Upgrade-'+i] = 1;
					}
				}
				var st = 0;
				for(i = 1; i <= 8; i++) {
					st = st + Number(a['Flagship-Upgrade-'+i]);
				}
				a['Flagship-Upgrade-Total'] = st;
				setAttrs(a);
			});
		});
